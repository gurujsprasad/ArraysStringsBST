package Arrays;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;


public class FindParisOfSum {
	
	public static void twoSum(int[] nums, int target) {
	    Map<Integer, Integer> map = new HashMap<>();
	    for (int i = 0; i < nums.length; i++) {
	        map.put(nums[i], i);
	    }
	    for (int i = 0; i < nums.length; i++) {
	        int complement = target - nums[i];
	        if (map.containsKey(complement) && map.get(complement) != i) {
	        	System.out.println(i +"-"+ map.get(complement));
	        }
	    }
	    //throw new IllegalArgumentException("No two sum solution");
	}
	
	public static void main(String args[]){
			
		int[] nums = {3,6,6,1,2,9,6,7,0};
		int target = 9;
		twoSum(nums,target);	
		/*LinkedHashMap<Integer, Integer> map = new LinkedHashMap<>();
        for(int i = 0; i < nums.length; i++){
            map.put(nums[i], i);  
        }
        
        for (int i = 0; i < nums.length; i++){
        	int checkNumber = target - nums[i];
        	if(map.containsKey(checkNumber)){
        		System.out.println(i +"-"+  map.get(checkNumber));
        		break;
        	}
        }*/
		
	}

}
